datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id             Int              @id @default(autoincrement())
  nome           String           @db.VarChar(99)
  email          String           @unique @db.VarChar(99)
  senha          String           @db.VarChar(99)
  cep            String           @db.VarChar(99)
  rua            String           @db.VarChar(99)
  bairro         String?          @db.VarChar(99)
  cidade         String           @db.VarChar(99)
  estado         EstadoEnum
  escola         String           @db.VarChar(100)
  data_nasc      DateTime
  escolaridade   EscolaridadeEnum
  sexo           SexoEnum
  adm            Boolean?         @default(false)
  conquistas     Conquistas?
  profilePicture String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  refreshTokens  RefreshToken[]   @relation("UserRefreshTokens")

  ticketsCriados     TicketUsuario[] @relation("CriadorTicket")
  ticketsAtualizados TicketUsuario[] @relation("AtualizadorTicket")
  ticketsFechados    TicketUsuario[] @relation("FechadorTicket")

  respostasTickets RepostaTicketUsuario[]
  Access           Access[]
}

enum BairrosJoinville {
  NOVA_BRASILIA
  SAO_MARCOS
  VILA_NOVA
  GLORIA
  COSTA_E_SILVA
  SANTO_ANTONIO
  AMERICA
  CENTRO
  ATIRADORES
  ANITA_GARIBALDI
  FLORESTA
  ITINGA
  ITAUM
  JARIVATUBA
  FATIMA
  GUANABARA
  BUCAREIN
  BOA_VISTA
  SAGUACU
  IRIRIU
  BOM_RETIRO
  AVENTUREIRO
  JARDIM_SOFIA
  MORRO_DO_MEIO
  ZONA_INDUSTRIAL_1
  PIRABEIRABA
  RIO_BONITO
  JARDIM_IRIRIU
  COMASA
  ADHEMAR_GARCIA
  PARANAGUA_MIRIM
  JOAO_COSTA
  BOEHMERWALDT
  PETROPOLIS
  ESPINHEIROS
  JARDIM_PARAISO
  VILA_CUBATAO
  ZONA_INDUSTRIAL_2
  PARQUE_GUARANI
  ULYSSES_GUIMARAES
  DONA_FRANCISCA
  PROFIPO
}

enum StatusEnum {
  EM_ABERTO
  EM_ANDAMENTO
  RESOLVIDO
  CANCELADO
}

enum PrioridadeEnum {
  NENHUMA
  ALTA
  MEDIA
  BAIXA
}

model TicketUsuario {
  id          Int            @id @default(autoincrement())
  userId      Int
  assunto     String
  descricao   String
  anexo       String?
  status      StatusEnum     @default(EM_ABERTO) // Status como enum
  prioridade  PrioridadeEnum @default(NENHUMA)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  updatedById Int?
  closedById  Int?

  usuario   Usuario  @relation("CriadorTicket", fields: [userId], references: [id])
  updatedBy Usuario? @relation("AtualizadorTicket", fields: [updatedById], references: [id])
  closedBy  Usuario? @relation("FechadorTicket", fields: [closedById], references: [id])

  respostas RepostaTicketUsuario[] @relation("TicketToRespostas") // Relação com respostas de ticket
}

model RepostaTicketUsuario {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  userId    Int
  resposta  String
  statusId  Int? // Referência ao ID do StatusEnum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario       @relation(fields: [userId], references: [id])
  ticket  TicketUsuario @relation(fields: [ticketId], references: [id], name: "TicketToRespostas") // Relacionamento oposto

  // Remove a relação direta com StatusEnum, pois statusId é uma chave estrangeira
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user Usuario @relation("UserRefreshTokens", fields: [userId], references: [id])

  @@unique([userId, token]) // Define uma chave única composta
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Access {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  user      Usuario  @relation(fields: [userId], references: [id]) // Supondo que haja um modelo User
  createdAt DateTime @default(now()) // Armazena a data e hora do acesso
}

model Conquistas {
  fk_id_usuario Int     @id
  conquista_1   Boolean
  conquista_2   Boolean
  conquista_3   Boolean
  usuario       Usuario @relation(fields: [fk_id_usuario], references: [id])
}

model Videos {
  id           Int              @id @default(autoincrement())
  titulo       String
  descricao    String
  videoLink   String           @db.Text
  escolaridade EscolaridadeEnum // Relaciona-se diretamente com a escolaridade
  createdAt    DateTime         @default(now()) // Armazena a data e hora do acesso
  updatedAt    DateTime         @updatedAt // Armazena a data e hora do acesso
}
model Materiais {
  id           Int              @id @default(autoincrement())
  titulo       String
  descricao    String
  materialLink   String           @db.Text
  escolaridade EscolaridadeEnum // Relaciona-se diretamente com a escolaridade
  createdAt    DateTime         @default(now()) // Armazena a data e hora do acesso
  updatedAt    DateTime         @updatedAt // Armazena a data e hora do acesso
}

enum EstadoEnum {
  E
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  NA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum EscolaridadeEnum {
  ENSINO_FUNDAMENTAL_I
  ENSINO_FUNDAMENTAL_II
  ENSINO_MEDIO
  OUTROS
}

enum SexoEnum {
  MASCULINO
  FEMININO
  NAO_DECLARAR
}
